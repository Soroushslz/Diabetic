import tensorflow as tf
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import mean_squared_error

# Load the dataset
data = pd.read_csv("diabetes.csv")

# Replace missing values with the mean
data = data.fillna(data.mean())

# Split the data into input and output
X = data.drop(columns=["Diabetes"])
Y = data["Diabetes"]

# Scale the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Perform feature selection using RFE
selector = RFE(estimator=LogisticRegression(), n_features_to_select=7)
X_selected = selector.fit_transform(X_scaled, Y)

# Get the selected feature names
selected_feature_names = X.columns[selector.support_]
print("Selected Features:")
print(selected_feature_names)

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X_selected, Y, test_size=0.2, random_state=1)

# Define parameters
ns = 30  # number of samples
ni = len(selected_feature_names)  # number of input features
n1 = 44 # number of first hidden layer
n2 = 42 # number of second hidden layer
n3 = 54 # number of third hidden layer
no = 1  # number of output

# Define the MLP model
model_mlp = tf.keras.Sequential([ # type: ignore
    tf.keras.layers.Dense(n1, activation='relu', input_shape=(ni,)), # type: ignore
    tf.keras.layers.Dense(n2, activation='relu'), # type: ignore
    tf.keras.layers.Dense(n3, activation='relu'), # type: ignore
    tf.keras.layers.Dense(no, activation='sigmoid') # type: ignore
])
model_mlp.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.SGD(learning_rate=0.01), metrics=['accuracy']) # type: ignore

# Reshape the data for the MLP model
X_train_reshaped = np.reshape(X_train, (X_train.shape[0], ni))
X_test_reshaped = np.reshape(X_test, (X_test.shape[0], ni))

# Define the early stopping callback
early_stopping = tf.keras.callbacks.EarlyStopping(patience=150, monitor='val_loss', restore_best_weights=True) # type: ignore

# Train the model
history_mlp = model_mlp.fit(X_train_reshaped, Y_train, epochs=200, batch_size=32,
                            validation_data=(X_test_reshaped, Y_test), verbose=0, callbacks=[early_stopping])

# Evaluate the MLP model on the test data
test_loss_mlp, test_acc_mlp = model_mlp.evaluate(X_test_reshaped, Y_test)

# Evaluate the MLP model on the train data
train_loss_mlp, train_acc_mlp = model_mlp.evaluate(X_train_reshaped, Y_train)

# Print the relationship between features and variables
print("Relationship between Features and Variables:")
weights = model_mlp.layers[0].get_weights()[0]
sorted_features = [feature for _, feature in sorted(zip(weights[:, 0], selected_feature_names), reverse=True)]
for feature, weight in zip(sorted_features, sorted(weights[:, 0], reverse=True)):
    print(f"{feature}: {weight:.4f}")

# Calculate the complexity of the MLP model
CMLP = ns * ni * n1 + n1 * n2 + n2 * n3 + n3 * no
print('Complexity of the MLP model:', CMLP)

# Print accuracy scores
print("Train Accuracy: {:.2f}%".format(train_acc_mlp * 100))
print("Test Accuracy: {:.2f}%".format(test_acc_mlp * 100))

# Print MSE score
mse_mlp = mean_squared_error(Y_test, model_mlp.predict(X_test_reshaped))
print("Mean Squared Error: {:.4f}" .format(mse_mlp))
